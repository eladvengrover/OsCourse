int handle_pipe_op(int count, char** arglist) {
    int pfds[2];
    int pipe_index = get_pipe_index(count, arglist);
    arglist[pipe_index] = NULL;
    if (pipe(pfds) == -1) {
        return -1;
    }
    int pid = fork();
    if (pid == -1) {
        close(pfds[0]);
        close(pfds[1]);
        return -1;
    }
    if (pid == 0) {
        // Child proccess #1
        close(pfds[0]);
        if (dup2(pfds[1], STDOUT_FILENO) == -1) {
            return -1;
        }
        close(pfds[1]);
        if (execvp(arglist[0], arglist) == -1) {
            perror("execvp failed!");
            exit(1);
        }
    } else {
        // Parent proccess
        int pid_2 = fork();
        if (pid_2 == -1) {
            close(pfds[0]);
            close(pfds[1]);
            return -1;
        }
        if (pid == 0) {
            // Child proccess #2
            close(pfds[1]);
            if (dup2(pfds[0], STDIN_FILENO) == -1) {
                return -1;
            }
            close(pfds[0]);
            if (execvp(arglist[pipe_index + 1], arglist + pipe_index + 1) == -1) {
                perror("execvp failed!");
                exit(1);
            }
        } else {
            // Parent proccess
            close(pfds[0]);
            close(pfds[1]);
            // Waiting for child #1
            if (waitpid(pid, NULL, 0) == -1) {
                return 0;
            }
            // Waiting for child #2
            if (waitpid(pid_2, NULL, 0) == -1) {
                return 0;
            }
            return 1;
            }
        }

    return 1;
}


cat output.txt | grep if